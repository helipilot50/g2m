
delimiters "$", "$"


exitDocument(definitions) ::= <<

@startuml
Title Generated %date%

$definitions$
hide Query
hide Mutation

@enduml

>>

inputObjectTypeDefinition(name, inputValues) ::= <<
class $name$ <<input\>>{
	$inputValues:{v |$v$
	}$
}

>>

enumTypeDefinition(name, enumValues) ::= <<
enum $name$ {
	$enumValues:{v |$v$
	}$
	
}

>>

enumValue(value) ::= <<
$value$
>>

scalarTypeDefinition(name) ::= <<
class $name$ <<scalar\>>{
}

>>

objectTypeDefinition(name, interfaces, fields, methods, linkFields) ::= <<
class $name$ {
	$fields$
	$methods$
}
$if(linkFields)$$linkFields$$endif$
$interfaces:{z|$z$<|..$name$ }$

>>

interfaceTypeDefinition(name, fields, methods, linkFields) ::= <<
interface $name$ {
	$fields$
	$methods$
}

$if(linkFields)$$linkFields$$endif$

>>

unionTypeDefinition(name, members) ::= <<

>>


type(type) ::= <<
$type$
>>


argumentsDefinition(arguments) ::= <<
$arguments$	
>>

inputValueDefinition(name, type, defaultValue) ::= <<
$name$:$type$$if(defaultValue)$ = $defaultValue$$endif$
>>


fieldDefinition(name, type) ::= <<
$name$: $type$

>>

operation(name, type, arguments) ::= <<
$name$($arguments; separator=", "$): $type$ 

>>

listType(typeName) ::= <<
$typeName$[] 
>>

nonNullType(name) ::= <<
1 $name$
>>

association(typeA, nameA, typeB, nameB) ::= <<
$typeA$ --> $typeB$ : $nameA$

>>

oneToMany() ::= <<
"1..*"
>>

manyToOne() ::= <<
"*..1"
>>

manyToMany() ::= <<
"*..*"
>>

zeroOrOne() ::= <<
"0..1"
>>

zeroToMany() ::= <<
"0..*"
>>


many() ::= <<
"*"
>>

exactlyOne() ::= <<
"1"
>>

int() ::= <<
Integer
>>

float() ::= <<
Double
>>

string() ::= <<
String
>>

boolean() ::= <<
Boolean
>>

customType(typeName)::= <<
$typeName$
>>

reservedWord(word) ::= <<
$word$
>>

normalWord(word) ::= <<
$word$
>>


reservedWordList() ::= <<
>>