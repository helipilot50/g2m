
delimiters "$", "$"

exitDocument(definitions, hide) ::= <<
@startuml
$definitions$
$hide$
@enduml

>>

inputObjectTypeDefinition(name, inputValues) ::= <<
class $name$ <<input\>>{
	$inputValues:{v |$v$
	}$
}

>>

enumTypeDefinition(name, enumValues) ::= <<
enum $name$ {
	$enumValues$
}

>>

enumValue(value) ::= <<
$value$
>>

scalarTypeDefinition(name) ::= <<
class $name$ <<scalar\>>{
}

>>

objectTypeDefinition(name, interfaces, fields, methods, linkFields) ::= <<
class $name$ {
	$fields$
	$methods$
}
$if(linkFields)$$linkFields$$endif$
$interfaces:{z|$z$<|--name }$

>>

interfaceTypeDefinition(name, fields, methods, linkFields) ::= <<
interface $name$ {
	$fields$
	$methods$
}

$if(linkFields)$$linkFields$$endif$

>>

unionTypeDefinition(name, members) ::= <<

>>

exitType(name) ::= <<
$name$
>>


exitTypeName(name) ::= <<
$name$
>>


argumentsDefinition(arguments) ::= <<
$arguments$	
>>

inputValueDefinition(name, type, defaultValue) ::= <<
$name$:$type$$if(defaultValue)$ = $defaultValue$$endif$
>>


fieldDefinition(name, type) ::= <<
$name$: $type$

>>

operation(name, type, arguments) ::= <<
$name$($first(arguments):{z|$z$}$$rest(arguments):{z|, $z$}$): $type$ 

>>

listType(typeName) ::= <<
$typeName$[] 
>>

nonNullType(name) ::= <<
1 $name$
>>

association(typeA, nameA, typeB, nameB) ::= <<
$typeA$ --> $typeB$ : $nameA$

>>

oneToMany() ::= <<
"1..*"
>>

manyToOne() ::= <<
"*..1"
>>

manyToMany() ::= <<
"*..*"
>>

zeroOrOne() ::= <<
"0..1"
>>

exactlyOne() ::= <<
"1"
>>